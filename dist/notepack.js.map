{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///notepack.js","webpack:///webpack/bootstrap 021f763394cb8091de38","webpack:///./lib/index.js","webpack:///./browser/encode.js","webpack:///./browser/decode.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","encode","decode","utf8Write","view","offset","str","i","l","length","charCodeAt","setUint8","utf8Length","_encode","bytes","defers","value","type","hi","lo","size","push","Error","Math","floor","isFinite","pow","float","Array","isArray","Date","time","getTime","ArrayBuffer","byteLength","bin","toJSON","keys","key","allKeys","Object","buf","DataView","deferIndex","deferWritten","nextOffset","defer","deferLength","Uint8Array","j","undefined","setFloat64","Decoder","buffer","isView","byteOffset","utf8Read","string","chr","end","byte","getUint8","toString","String","fromCharCode","decoder","parse","prototype","array","map","slice","prefix","getUint16","getUint32","getInt8","getFloat32","getFloat64","getInt16","getInt32"],"mappings":"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","file":"notepack.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"notepack\"] = factory();\n\telse\n\t\troot[\"notepack\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"notepack\"] = factory();\n\telse\n\t\troot[\"notepack\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\texports.encode = __webpack_require__(1);\n\texports.decode = __webpack_require__(2);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction utf8Write(view, offset, str) {\n\t  var c = 0;\n\t  for (var i = 0, l = str.length; i < l; i++) {\n\t    c = str.charCodeAt(i);\n\t    if (c < 0x80) {\n\t      view.setUint8(offset++, c);\n\t    }\n\t    else if (c < 0x800) {\n\t      view.setUint8(offset++, 0xc0 | (c >> 6));\n\t      view.setUint8(offset++, 0x80 | (c & 0x3f));\n\t    }\n\t    else if (c < 0xd800 || c >= 0xe000) {\n\t      view.setUint8(offset++, 0xe0 | (c >> 12));\n\t      view.setUint8(offset++, 0x80 | (c >> 6) & 0x3f);\n\t      view.setUint8(offset++, 0x80 | (c & 0x3f));\n\t    }\n\t    else {\n\t      i++;\n\t      c = 0x10000 + (((c & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));\n\t      view.setUint8(offset++, 0xf0 | (c >> 18));\n\t      view.setUint8(offset++, 0x80 | (c >> 12) & 0x3f);\n\t      view.setUint8(offset++, 0x80 | (c >> 6) & 0x3f);\n\t      view.setUint8(offset++, 0x80 | (c & 0x3f));\n\t    }\n\t  }\n\t}\n\t\n\tfunction utf8Length(str) {\n\t  var c = 0, length = 0;\n\t  for (var i = 0, l = str.length; i < l; i++) {\n\t    c = str.charCodeAt(i);\n\t    if (c < 0x80) {\n\t      length += 1;\n\t    }\n\t    else if (c < 0x800) {\n\t      length += 2;\n\t    }\n\t    else if (c < 0xd800 || c >= 0xe000) {\n\t      length += 3;\n\t    }\n\t    else {\n\t      i++;\n\t      length += 4;\n\t    }\n\t  }\n\t  return length;\n\t}\n\t\n\tfunction _encode(bytes, defers, value) {\n\t  var type = typeof value, i = 0, l = 0, hi = 0, lo = 0, length = 0, size = 0;\n\t\n\t  if (type === 'string') {\n\t    length = utf8Length(value);\n\t\n\t    // fixstr\n\t    if (length < 0x20) {\n\t      bytes.push(length | 0xa0);\n\t      size = 1;\n\t    }\n\t    // str 8\n\t    else if (length < 0x100) {\n\t      bytes.push(0xd9, length);\n\t      size = 2;\n\t    }\n\t    // str 16\n\t    else if (length < 0x10000) {\n\t      bytes.push(0xda, length >> 8, length);\n\t      size = 3;\n\t    }\n\t    // str 32\n\t    else if (length < 0x100000000) {\n\t      bytes.push(0xdb, length >> 24, length >> 16, length >> 8, length);\n\t      size = 5;\n\t    } else {\n\t      throw new Error('String too long');\n\t    }\n\t    defers.push({ str: value, length: length, offset: bytes.length });\n\t    return size + length;\n\t  }\n\t  if (type === 'number') {\n\t    // TODO: encode to float 32?\n\t\n\t    // float 64\n\t    if (Math.floor(value) !== value || !isFinite(value)) {\n\t      bytes.push(0xcb);\n\t      defers.push({ float: value, length: 8, offset: bytes.length });\n\t      return 9;\n\t    }\n\t\n\t    if (value >= 0) {\n\t      // positive fixnum\n\t      if (value < 0x80) {\n\t        bytes.push(value);\n\t        return 1;\n\t      }\n\t      // uint 8\n\t      if (value < 0x100) {\n\t        bytes.push(0xcc, value);\n\t        return 2;\n\t      }\n\t      // uint 16\n\t      if (value < 0x10000) {\n\t        bytes.push(0xcd, value >> 8, value);\n\t        return 3;\n\t      }\n\t      // uint 32\n\t      if (value < 0x100000000) {\n\t        bytes.push(0xce, value >> 24, value >> 16, value >> 8, value);\n\t        return 5;\n\t      }\n\t      // uint 64\n\t      hi = (value / Math.pow(2, 32)) >> 0;\n\t      lo = value >>> 0;\n\t      bytes.push(0xcf, hi >> 24, hi >> 16, hi >> 8, hi, lo >> 24, lo >> 16, lo >> 8, lo);\n\t      return 9;\n\t    } else {\n\t      // negative fixnum\n\t      if (value >= -0x20) {\n\t        bytes.push(value);\n\t        return 1;\n\t      }\n\t      // int 8\n\t      if (value >= -0x80) {\n\t        bytes.push(0xd0, value);\n\t        return 2;\n\t      }\n\t      // int 16\n\t      if (value >= -0x8000) {\n\t        bytes.push(0xd1, value >> 8, value);\n\t        return 3;\n\t      }\n\t      // int 32\n\t      if (value >= -0x80000000) {\n\t        bytes.push(0xd2, value >> 24, value >> 16, value >> 8, value);\n\t        return 5;\n\t      }\n\t      // int 64\n\t      hi = Math.floor(value / Math.pow(2, 32));\n\t      lo = value >>> 0;\n\t      bytes.push(0xd3, hi >> 24, hi >> 16, hi >> 8, hi, lo >> 24, lo >> 16, lo >> 8, lo);\n\t      return 9;\n\t    }\n\t  }\n\t  if (type === 'object') {\n\t    // nil\n\t    if (value === null) {\n\t      bytes.push(0xc0);\n\t      return 1;\n\t    }\n\t\n\t    if (Array.isArray(value)) {\n\t      length = value.length;\n\t\n\t      // fixarray\n\t      if (length < 0x10) {\n\t        bytes.push(length | 0x90);\n\t        size = 1;\n\t      }\n\t      // array 16\n\t      else if (length < 0x10000) {\n\t        bytes.push(0xdc, length >> 8, length);\n\t        size = 3;\n\t      }\n\t      // array 32\n\t      else if (length < 0x100000000) {\n\t        bytes.push(0xdd, length >> 24, length >> 16, length >> 8, length);\n\t        size = 5;\n\t      } else {\n\t        throw new Error('Array too large');\n\t      }\n\t      for (i = 0; i < length; i++) {\n\t        size += _encode(bytes, defers, value[i]);\n\t      }\n\t      return size;\n\t    }\n\t\n\t    // fixext 8 / Date\n\t    if (value instanceof Date) {\n\t      var time = value.getTime();\n\t      hi = Math.floor(time / Math.pow(2, 32));\n\t      lo = time >>> 0;\n\t      bytes.push(0xd7, 0, hi >> 24, hi >> 16, hi >> 8, hi, lo >> 24, lo >> 16, lo >> 8, lo);\n\t      return 10;\n\t    }\n\t\n\t    if (value instanceof ArrayBuffer) {\n\t      length = value.byteLength;\n\t\n\t      // bin 8\n\t      if (length < 0x100) {\n\t        bytes.push(0xc4, length);\n\t        size = 2;\n\t      } else\n\t      // bin 16\n\t      if (length < 0x10000) {\n\t        bytes.push(0xc5, length >> 8, length);\n\t        size = 3;\n\t      } else\n\t      // bin 32\n\t      if (length < 0x100000000) {\n\t        bytes.push(0xc6, length >> 24, length >> 16, length >> 8, length);\n\t        size = 5;\n\t      } else {\n\t        throw new Error('Buffer too large');\n\t      }\n\t      defers.push({ bin: value, length: length, offset: bytes.length });\n\t      return size + length;\n\t    }\n\t\n\t    if (typeof value.toJSON === 'function') {\n\t      return _encode(bytes, defers, value.toJSON());\n\t    }\n\t\n\t    var keys = [], key = '';\n\t\n\t    var allKeys = Object.keys(value);\n\t    for (i = 0, l = allKeys.length; i < l; i++) {\n\t      key = allKeys[i];\n\t      if (typeof value[key] !== 'function') {\n\t        keys.push(key);\n\t      }\n\t    }\n\t    length = keys.length;\n\t\n\t    // fixmap\n\t    if (length < 0x10) {\n\t      bytes.push(length | 0x80);\n\t      size = 1;\n\t    }\n\t    // map 16\n\t    else if (length < 0x10000) {\n\t      bytes.push(0xde, length >> 8, length);\n\t      size = 3;\n\t    }\n\t    // map 32\n\t    else if (length < 0x100000000) {\n\t      bytes.push(0xdf, length >> 24, length >> 16, length >> 8, length);\n\t      size = 5;\n\t    } else {\n\t      throw new Error('Object too large');\n\t    }\n\t\n\t    for (i = 0; i < length; i++) {\n\t      key = keys[i];\n\t      size += _encode(bytes, defers, key);\n\t      size += _encode(bytes, defers, value[key]);\n\t    }\n\t    return size;\n\t  }\n\t  // false/true\n\t  if (type === 'boolean') {\n\t    bytes.push(value ? 0xc3 : 0xc2);\n\t    return 1;\n\t  }\n\t  // fixext 1 / undefined\n\t  if (type === 'undefined') {\n\t    bytes.push(0xd4, 0, 0);\n\t    return 3;\n\t  }\n\t  throw new Error('Could not encode');\n\t}\n\t\n\tfunction encode(value) {\n\t  var bytes = [];\n\t  var defers = [];\n\t  var size = _encode(bytes, defers, value);\n\t  var buf = new ArrayBuffer(size);\n\t  var view = new DataView(buf);\n\t\n\t  var deferIndex = 0;\n\t  var deferWritten = 0;\n\t  var nextOffset = -1;\n\t  if (defers.length > 0) {\n\t    nextOffset = defers[0].offset;\n\t  }\n\t\n\t  var defer, deferLength = 0, offset = 0;\n\t  for (var i = 0, l = bytes.length; i < l; i++) {\n\t    view.setUint8(deferWritten + i, bytes[i]);\n\t    if (i + 1 !== nextOffset) { continue; }\n\t    defer = defers[deferIndex];\n\t    deferLength = defer.length;\n\t    offset = deferWritten + nextOffset;\n\t    if (defer.bin) {\n\t      var bin = new Uint8Array(defer.bin);\n\t      for (var j = 0; j < deferLength; j++) {\n\t        view.setUint8(offset + j, bin[j]);\n\t      }\n\t    } else if (defer.str) {\n\t      utf8Write(view, offset, defer.str);\n\t    } else if (defer.float !== undefined) {\n\t      view.setFloat64(offset, defer.float);\n\t    }\n\t    deferIndex++;\n\t    deferWritten += deferLength;\n\t    if (defers[deferIndex]) {\n\t      nextOffset = defers[deferIndex].offset;\n\t    }\n\t  }\n\t  return buf;\n\t}\n\t\n\tmodule.exports = encode;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction Decoder(buffer) {\n\t  this.offset = 0;\n\t  if (buffer instanceof ArrayBuffer) {\n\t    this.buffer = buffer;\n\t    this.view = new DataView(this.buffer);\n\t  } else if (ArrayBuffer.isView(buffer)) {\n\t    this.buffer = buffer.buffer;\n\t    this.view = new DataView(this.buffer, buffer.byteOffset, buffer.byteLength);\n\t  } else {\n\t    throw new Error('Invalid argument');\n\t  }\n\t}\n\t\n\tfunction utf8Read(view, offset, length) {\n\t  var string = '', chr = 0;\n\t  for (var i = offset, end = offset + length; i < end; i++) {\n\t    var byte = view.getUint8(i);\n\t    if ((byte & 0x80) === 0x00) {\n\t      string += String.fromCharCode(byte);\n\t      continue;\n\t    }\n\t    if ((byte & 0xe0) === 0xc0) {\n\t      string += String.fromCharCode(\n\t        ((byte & 0x0f) << 6) |\n\t        (view.getUint8(++i) & 0x3f)\n\t      );\n\t      continue;\n\t    }\n\t    if ((byte & 0xf0) === 0xe0) {\n\t      string += String.fromCharCode(\n\t        ((byte & 0x0f) << 12) |\n\t        ((view.getUint8(++i) & 0x3f) << 6) |\n\t        ((view.getUint8(++i) & 0x3f) << 0)\n\t      );\n\t      continue;\n\t    }\n\t    if ((byte & 0xf8) === 0xf0) {\n\t      chr = ((byte & 0x07) << 18) |\n\t        ((view.getUint8(++i) & 0x3f) << 12) |\n\t        ((view.getUint8(++i) & 0x3f) << 6) |\n\t        ((view.getUint8(++i) & 0x3f) << 0);\n\t      if (chr >= 0x010000) { // surrogate pair\n\t        chr -= 0x010000;\n\t        string += String.fromCharCode((chr >>> 10) + 0xD800, (chr & 0x3FF) + 0xDC00);\n\t      } else {\n\t        string += String.fromCharCode(chr);\n\t      }\n\t      continue;\n\t    }\n\t    throw new Error('Invalid byte ' + byte.toString(16));\n\t  }\n\t  return string;\n\t}\n\t\n\tDecoder.prototype.array = function (length) {\n\t  var value = new Array(length);\n\t  for (var i = 0; i < length; i++) {\n\t    value[i] = this.parse();\n\t  }\n\t  return value;\n\t};\n\t\n\tDecoder.prototype.map = function (length) {\n\t  var key = '', value = {};\n\t  for (var i = 0; i < length; i++) {\n\t    key = this.parse();\n\t    value[key] = this.parse();\n\t  }\n\t  return value;\n\t};\n\t\n\tDecoder.prototype.str = function (length) {\n\t  var value = utf8Read(this.view, this.offset, length);\n\t  this.offset += length;\n\t  return value;\n\t};\n\t\n\tDecoder.prototype.bin = function (length) {\n\t  var value = this.buffer.slice(this.offset, this.offset + length);\n\t  this.offset += length;\n\t  return value;\n\t};\n\t\n\tDecoder.prototype.parse = function () {\n\t  var prefix = this.view.getUint8(this.offset++);\n\t  var value, length = 0, type = 0, hi = 0, lo = 0;\n\t\n\t  if (prefix < 0xc0) {\n\t    // positive fixint\n\t    if (prefix < 0x80) {\n\t      return prefix;\n\t    }\n\t    // fixmap\n\t    if (prefix < 0x90) {\n\t      return this.map(prefix & 0x0f);\n\t    }\n\t    // fixarray\n\t    if (prefix < 0xa0) {\n\t      return this.array(prefix & 0x0f);\n\t    }\n\t    // fixstr\n\t    return this.str(prefix & 0x1f);\n\t  }\n\t\n\t  // negative fixint\n\t  if (prefix > 0xdf) {\n\t    return (0xff - prefix + 1) * -1;\n\t  }\n\t\n\t  switch (prefix) {\n\t    // nil\n\t    case 0xc0:\n\t      return null;\n\t    // false\n\t    case 0xc2:\n\t      return false;\n\t    // true\n\t    case 0xc3:\n\t      return true;\n\t\n\t    // bin\n\t    case 0xc4:\n\t      length = this.view.getUint8(this.offset);\n\t      this.offset += 1;\n\t      return this.bin(length);\n\t    case 0xc5:\n\t      length = this.view.getUint16(this.offset);\n\t      this.offset += 2;\n\t      return this.bin(length);\n\t    case 0xc6:\n\t      length = this.view.getUint32(this.offset);\n\t      this.offset += 4;\n\t      return this.bin(length);\n\t\n\t    // ext\n\t    case 0xc7:\n\t      length = this.view.getUint8(this.offset);\n\t      type = this.view.getInt8(this.offset + 1);\n\t      this.offset += 2;\n\t      return [type, this.bin(length)];\n\t    case 0xc8:\n\t      length = this.view.getUint16(this.offset);\n\t      type = this.view.getInt8(this.offset + 2);\n\t      this.offset += 3;\n\t      return [type, this.bin(length)];\n\t    case 0xc9:\n\t      length = this.view.getUint32(this.offset);\n\t      type = this.view.getInt8(this.offset + 4);\n\t      this.offset += 5;\n\t      return [type, this.bin(length)];\n\t\n\t    // float\n\t    case 0xca:\n\t      value = this.view.getFloat32(this.offset);\n\t      this.offset += 4;\n\t      return value;\n\t    case 0xcb:\n\t      value = this.view.getFloat64(this.offset);\n\t      this.offset += 8;\n\t      return value;\n\t\n\t    // uint\n\t    case 0xcc:\n\t      value = this.view.getUint8(this.offset);\n\t      this.offset += 1;\n\t      return value;\n\t    case 0xcd:\n\t      value = this.view.getUint16(this.offset);\n\t      this.offset += 2;\n\t      return value;\n\t    case 0xce:\n\t      value = this.view.getUint32(this.offset);\n\t      this.offset += 4;\n\t      return value;\n\t    case 0xcf:\n\t      hi = this.view.getUint32(this.offset) * Math.pow(2, 32);\n\t      lo = this.view.getUint32(this.offset + 4);\n\t      this.offset += 8;\n\t      return hi + lo;\n\t\n\t    // int\n\t    case 0xd0:\n\t      value = this.view.getInt8(this.offset);\n\t      this.offset += 1;\n\t      return value;\n\t    case 0xd1:\n\t      value = this.view.getInt16(this.offset);\n\t      this.offset += 2;\n\t      return value;\n\t    case 0xd2:\n\t      value = this.view.getInt32(this.offset);\n\t      this.offset += 4;\n\t      return value;\n\t    case 0xd3:\n\t      hi = this.view.getInt32(this.offset) * Math.pow(2, 32);\n\t      lo = this.view.getUint32(this.offset + 4);\n\t      this.offset += 8;\n\t      return hi + lo;\n\t\n\t    // fixext\n\t    case 0xd4:\n\t      type = this.view.getInt8(this.offset);\n\t      this.offset += 1;\n\t      if (type === 0x00) {\n\t        this.offset += 1;\n\t        return void 0;\n\t      }\n\t      return [type, this.bin(1)];\n\t    case 0xd5:\n\t      type = this.view.getInt8(this.offset);\n\t      this.offset += 1;\n\t      return [type, this.bin(2)];\n\t    case 0xd6:\n\t      type = this.view.getInt8(this.offset);\n\t      this.offset += 1;\n\t      return [type, this.bin(4)];\n\t    case 0xd7:\n\t      type = this.view.getInt8(this.offset);\n\t      this.offset += 1;\n\t      if (type === 0x00) {\n\t        hi = this.view.getInt32(this.offset) * Math.pow(2, 32);\n\t        lo = this.view.getUint32(this.offset + 4);\n\t        this.offset += 8;\n\t        return new Date(hi + lo);\n\t      }\n\t      return [type, this.bin(8)];\n\t    case 0xd8:\n\t      type = this.view.getInt8(this.offset);\n\t      this.offset += 1;\n\t      return [type, this.bin(16)];\n\t\n\t    // str\n\t    case 0xd9:\n\t      length = this.view.getUint8(this.offset);\n\t      this.offset += 1;\n\t      return this.str(length);\n\t    case 0xda:\n\t      length = this.view.getUint16(this.offset);\n\t      this.offset += 2;\n\t      return this.str(length);\n\t    case 0xdb:\n\t      length = this.view.getUint32(this.offset);\n\t      this.offset += 4;\n\t      return this.str(length);\n\t\n\t    // array\n\t    case 0xdc:\n\t      length = this.view.getUint16(this.offset);\n\t      this.offset += 2;\n\t      return this.array(length);\n\t    case 0xdd:\n\t      length = this.view.getUint32(this.offset);\n\t      this.offset += 4;\n\t      return this.array(length);\n\t\n\t    // map\n\t    case 0xde:\n\t      length = this.view.getUint16(this.offset);\n\t      this.offset += 2;\n\t      return this.map(length);\n\t    case 0xdf:\n\t      length = this.view.getUint32(this.offset);\n\t      this.offset += 4;\n\t      return this.map(length);\n\t  }\n\t\n\t  throw new Error('Could not parse');\n\t};\n\t\n\tfunction decode(buffer) {\n\t  var decoder = new Decoder(buffer);\n\t  var value = decoder.parse();\n\t  if (decoder.offset !== buffer.byteLength) {\n\t    throw new Error((buffer.byteLength - decoder.offset) + ' trailing bytes');\n\t  }\n\t  return value;\n\t}\n\t\n\tmodule.exports = decode;\n\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// notepack.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 021f763394cb8091de38","exports.encode = require('./encode');\nexports.decode = require('./decode');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/index.js\n// module id = 0\n// module chunks = 0","'use strict';\n\nfunction utf8Write(view, offset, str) {\n  var c = 0;\n  for (var i = 0, l = str.length; i < l; i++) {\n    c = str.charCodeAt(i);\n    if (c < 0x80) {\n      view.setUint8(offset++, c);\n    }\n    else if (c < 0x800) {\n      view.setUint8(offset++, 0xc0 | (c >> 6));\n      view.setUint8(offset++, 0x80 | (c & 0x3f));\n    }\n    else if (c < 0xd800 || c >= 0xe000) {\n      view.setUint8(offset++, 0xe0 | (c >> 12));\n      view.setUint8(offset++, 0x80 | (c >> 6) & 0x3f);\n      view.setUint8(offset++, 0x80 | (c & 0x3f));\n    }\n    else {\n      i++;\n      c = 0x10000 + (((c & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));\n      view.setUint8(offset++, 0xf0 | (c >> 18));\n      view.setUint8(offset++, 0x80 | (c >> 12) & 0x3f);\n      view.setUint8(offset++, 0x80 | (c >> 6) & 0x3f);\n      view.setUint8(offset++, 0x80 | (c & 0x3f));\n    }\n  }\n}\n\nfunction utf8Length(str) {\n  var c = 0, length = 0;\n  for (var i = 0, l = str.length; i < l; i++) {\n    c = str.charCodeAt(i);\n    if (c < 0x80) {\n      length += 1;\n    }\n    else if (c < 0x800) {\n      length += 2;\n    }\n    else if (c < 0xd800 || c >= 0xe000) {\n      length += 3;\n    }\n    else {\n      i++;\n      length += 4;\n    }\n  }\n  return length;\n}\n\nfunction _encode(bytes, defers, value) {\n  var type = typeof value, i = 0, l = 0, hi = 0, lo = 0, length = 0, size = 0;\n\n  if (type === 'string') {\n    length = utf8Length(value);\n\n    // fixstr\n    if (length < 0x20) {\n      bytes.push(length | 0xa0);\n      size = 1;\n    }\n    // str 8\n    else if (length < 0x100) {\n      bytes.push(0xd9, length);\n      size = 2;\n    }\n    // str 16\n    else if (length < 0x10000) {\n      bytes.push(0xda, length >> 8, length);\n      size = 3;\n    }\n    // str 32\n    else if (length < 0x100000000) {\n      bytes.push(0xdb, length >> 24, length >> 16, length >> 8, length);\n      size = 5;\n    } else {\n      throw new Error('String too long');\n    }\n    defers.push({ str: value, length: length, offset: bytes.length });\n    return size + length;\n  }\n  if (type === 'number') {\n    // TODO: encode to float 32?\n\n    // float 64\n    if (Math.floor(value) !== value || !isFinite(value)) {\n      bytes.push(0xcb);\n      defers.push({ float: value, length: 8, offset: bytes.length });\n      return 9;\n    }\n\n    if (value >= 0) {\n      // positive fixnum\n      if (value < 0x80) {\n        bytes.push(value);\n        return 1;\n      }\n      // uint 8\n      if (value < 0x100) {\n        bytes.push(0xcc, value);\n        return 2;\n      }\n      // uint 16\n      if (value < 0x10000) {\n        bytes.push(0xcd, value >> 8, value);\n        return 3;\n      }\n      // uint 32\n      if (value < 0x100000000) {\n        bytes.push(0xce, value >> 24, value >> 16, value >> 8, value);\n        return 5;\n      }\n      // uint 64\n      hi = (value / Math.pow(2, 32)) >> 0;\n      lo = value >>> 0;\n      bytes.push(0xcf, hi >> 24, hi >> 16, hi >> 8, hi, lo >> 24, lo >> 16, lo >> 8, lo);\n      return 9;\n    } else {\n      // negative fixnum\n      if (value >= -0x20) {\n        bytes.push(value);\n        return 1;\n      }\n      // int 8\n      if (value >= -0x80) {\n        bytes.push(0xd0, value);\n        return 2;\n      }\n      // int 16\n      if (value >= -0x8000) {\n        bytes.push(0xd1, value >> 8, value);\n        return 3;\n      }\n      // int 32\n      if (value >= -0x80000000) {\n        bytes.push(0xd2, value >> 24, value >> 16, value >> 8, value);\n        return 5;\n      }\n      // int 64\n      hi = Math.floor(value / Math.pow(2, 32));\n      lo = value >>> 0;\n      bytes.push(0xd3, hi >> 24, hi >> 16, hi >> 8, hi, lo >> 24, lo >> 16, lo >> 8, lo);\n      return 9;\n    }\n  }\n  if (type === 'object') {\n    // nil\n    if (value === null) {\n      bytes.push(0xc0);\n      return 1;\n    }\n\n    if (Array.isArray(value)) {\n      length = value.length;\n\n      // fixarray\n      if (length < 0x10) {\n        bytes.push(length | 0x90);\n        size = 1;\n      }\n      // array 16\n      else if (length < 0x10000) {\n        bytes.push(0xdc, length >> 8, length);\n        size = 3;\n      }\n      // array 32\n      else if (length < 0x100000000) {\n        bytes.push(0xdd, length >> 24, length >> 16, length >> 8, length);\n        size = 5;\n      } else {\n        throw new Error('Array too large');\n      }\n      for (i = 0; i < length; i++) {\n        size += _encode(bytes, defers, value[i]);\n      }\n      return size;\n    }\n\n    // fixext 8 / Date\n    if (value instanceof Date) {\n      var time = value.getTime();\n      hi = Math.floor(time / Math.pow(2, 32));\n      lo = time >>> 0;\n      bytes.push(0xd7, 0, hi >> 24, hi >> 16, hi >> 8, hi, lo >> 24, lo >> 16, lo >> 8, lo);\n      return 10;\n    }\n\n    if (value instanceof ArrayBuffer) {\n      length = value.byteLength;\n\n      // bin 8\n      if (length < 0x100) {\n        bytes.push(0xc4, length);\n        size = 2;\n      } else\n      // bin 16\n      if (length < 0x10000) {\n        bytes.push(0xc5, length >> 8, length);\n        size = 3;\n      } else\n      // bin 32\n      if (length < 0x100000000) {\n        bytes.push(0xc6, length >> 24, length >> 16, length >> 8, length);\n        size = 5;\n      } else {\n        throw new Error('Buffer too large');\n      }\n      defers.push({ bin: value, length: length, offset: bytes.length });\n      return size + length;\n    }\n\n    if (typeof value.toJSON === 'function') {\n      return _encode(bytes, defers, value.toJSON());\n    }\n\n    var keys = [], key = '';\n\n    var allKeys = Object.keys(value);\n    for (i = 0, l = allKeys.length; i < l; i++) {\n      key = allKeys[i];\n      if (typeof value[key] !== 'function') {\n        keys.push(key);\n      }\n    }\n    length = keys.length;\n\n    // fixmap\n    if (length < 0x10) {\n      bytes.push(length | 0x80);\n      size = 1;\n    }\n    // map 16\n    else if (length < 0x10000) {\n      bytes.push(0xde, length >> 8, length);\n      size = 3;\n    }\n    // map 32\n    else if (length < 0x100000000) {\n      bytes.push(0xdf, length >> 24, length >> 16, length >> 8, length);\n      size = 5;\n    } else {\n      throw new Error('Object too large');\n    }\n\n    for (i = 0; i < length; i++) {\n      key = keys[i];\n      size += _encode(bytes, defers, key);\n      size += _encode(bytes, defers, value[key]);\n    }\n    return size;\n  }\n  // false/true\n  if (type === 'boolean') {\n    bytes.push(value ? 0xc3 : 0xc2);\n    return 1;\n  }\n  // fixext 1 / undefined\n  if (type === 'undefined') {\n    bytes.push(0xd4, 0, 0);\n    return 3;\n  }\n  throw new Error('Could not encode');\n}\n\nfunction encode(value) {\n  var bytes = [];\n  var defers = [];\n  var size = _encode(bytes, defers, value);\n  var buf = new ArrayBuffer(size);\n  var view = new DataView(buf);\n\n  var deferIndex = 0;\n  var deferWritten = 0;\n  var nextOffset = -1;\n  if (defers.length > 0) {\n    nextOffset = defers[0].offset;\n  }\n\n  var defer, deferLength = 0, offset = 0;\n  for (var i = 0, l = bytes.length; i < l; i++) {\n    view.setUint8(deferWritten + i, bytes[i]);\n    if (i + 1 !== nextOffset) { continue; }\n    defer = defers[deferIndex];\n    deferLength = defer.length;\n    offset = deferWritten + nextOffset;\n    if (defer.bin) {\n      var bin = new Uint8Array(defer.bin);\n      for (var j = 0; j < deferLength; j++) {\n        view.setUint8(offset + j, bin[j]);\n      }\n    } else if (defer.str) {\n      utf8Write(view, offset, defer.str);\n    } else if (defer.float !== undefined) {\n      view.setFloat64(offset, defer.float);\n    }\n    deferIndex++;\n    deferWritten += deferLength;\n    if (defers[deferIndex]) {\n      nextOffset = defers[deferIndex].offset;\n    }\n  }\n  return buf;\n}\n\nmodule.exports = encode;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./browser/encode.js\n// module id = 1\n// module chunks = 0","'use strict';\n\nfunction Decoder(buffer) {\n  this.offset = 0;\n  if (buffer instanceof ArrayBuffer) {\n    this.buffer = buffer;\n    this.view = new DataView(this.buffer);\n  } else if (ArrayBuffer.isView(buffer)) {\n    this.buffer = buffer.buffer;\n    this.view = new DataView(this.buffer, buffer.byteOffset, buffer.byteLength);\n  } else {\n    throw new Error('Invalid argument');\n  }\n}\n\nfunction utf8Read(view, offset, length) {\n  var string = '', chr = 0;\n  for (var i = offset, end = offset + length; i < end; i++) {\n    var byte = view.getUint8(i);\n    if ((byte & 0x80) === 0x00) {\n      string += String.fromCharCode(byte);\n      continue;\n    }\n    if ((byte & 0xe0) === 0xc0) {\n      string += String.fromCharCode(\n        ((byte & 0x0f) << 6) |\n        (view.getUint8(++i) & 0x3f)\n      );\n      continue;\n    }\n    if ((byte & 0xf0) === 0xe0) {\n      string += String.fromCharCode(\n        ((byte & 0x0f) << 12) |\n        ((view.getUint8(++i) & 0x3f) << 6) |\n        ((view.getUint8(++i) & 0x3f) << 0)\n      );\n      continue;\n    }\n    if ((byte & 0xf8) === 0xf0) {\n      chr = ((byte & 0x07) << 18) |\n        ((view.getUint8(++i) & 0x3f) << 12) |\n        ((view.getUint8(++i) & 0x3f) << 6) |\n        ((view.getUint8(++i) & 0x3f) << 0);\n      if (chr >= 0x010000) { // surrogate pair\n        chr -= 0x010000;\n        string += String.fromCharCode((chr >>> 10) + 0xD800, (chr & 0x3FF) + 0xDC00);\n      } else {\n        string += String.fromCharCode(chr);\n      }\n      continue;\n    }\n    throw new Error('Invalid byte ' + byte.toString(16));\n  }\n  return string;\n}\n\nDecoder.prototype.array = function (length) {\n  var value = new Array(length);\n  for (var i = 0; i < length; i++) {\n    value[i] = this.parse();\n  }\n  return value;\n};\n\nDecoder.prototype.map = function (length) {\n  var key = '', value = {};\n  for (var i = 0; i < length; i++) {\n    key = this.parse();\n    value[key] = this.parse();\n  }\n  return value;\n};\n\nDecoder.prototype.str = function (length) {\n  var value = utf8Read(this.view, this.offset, length);\n  this.offset += length;\n  return value;\n};\n\nDecoder.prototype.bin = function (length) {\n  var value = this.buffer.slice(this.offset, this.offset + length);\n  this.offset += length;\n  return value;\n};\n\nDecoder.prototype.parse = function () {\n  var prefix = this.view.getUint8(this.offset++);\n  var value, length = 0, type = 0, hi = 0, lo = 0;\n\n  if (prefix < 0xc0) {\n    // positive fixint\n    if (prefix < 0x80) {\n      return prefix;\n    }\n    // fixmap\n    if (prefix < 0x90) {\n      return this.map(prefix & 0x0f);\n    }\n    // fixarray\n    if (prefix < 0xa0) {\n      return this.array(prefix & 0x0f);\n    }\n    // fixstr\n    return this.str(prefix & 0x1f);\n  }\n\n  // negative fixint\n  if (prefix > 0xdf) {\n    return (0xff - prefix + 1) * -1;\n  }\n\n  switch (prefix) {\n    // nil\n    case 0xc0:\n      return null;\n    // false\n    case 0xc2:\n      return false;\n    // true\n    case 0xc3:\n      return true;\n\n    // bin\n    case 0xc4:\n      length = this.view.getUint8(this.offset);\n      this.offset += 1;\n      return this.bin(length);\n    case 0xc5:\n      length = this.view.getUint16(this.offset);\n      this.offset += 2;\n      return this.bin(length);\n    case 0xc6:\n      length = this.view.getUint32(this.offset);\n      this.offset += 4;\n      return this.bin(length);\n\n    // ext\n    case 0xc7:\n      length = this.view.getUint8(this.offset);\n      type = this.view.getInt8(this.offset + 1);\n      this.offset += 2;\n      return [type, this.bin(length)];\n    case 0xc8:\n      length = this.view.getUint16(this.offset);\n      type = this.view.getInt8(this.offset + 2);\n      this.offset += 3;\n      return [type, this.bin(length)];\n    case 0xc9:\n      length = this.view.getUint32(this.offset);\n      type = this.view.getInt8(this.offset + 4);\n      this.offset += 5;\n      return [type, this.bin(length)];\n\n    // float\n    case 0xca:\n      value = this.view.getFloat32(this.offset);\n      this.offset += 4;\n      return value;\n    case 0xcb:\n      value = this.view.getFloat64(this.offset);\n      this.offset += 8;\n      return value;\n\n    // uint\n    case 0xcc:\n      value = this.view.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    case 0xcd:\n      value = this.view.getUint16(this.offset);\n      this.offset += 2;\n      return value;\n    case 0xce:\n      value = this.view.getUint32(this.offset);\n      this.offset += 4;\n      return value;\n    case 0xcf:\n      hi = this.view.getUint32(this.offset) * Math.pow(2, 32);\n      lo = this.view.getUint32(this.offset + 4);\n      this.offset += 8;\n      return hi + lo;\n\n    // int\n    case 0xd0:\n      value = this.view.getInt8(this.offset);\n      this.offset += 1;\n      return value;\n    case 0xd1:\n      value = this.view.getInt16(this.offset);\n      this.offset += 2;\n      return value;\n    case 0xd2:\n      value = this.view.getInt32(this.offset);\n      this.offset += 4;\n      return value;\n    case 0xd3:\n      hi = this.view.getInt32(this.offset) * Math.pow(2, 32);\n      lo = this.view.getUint32(this.offset + 4);\n      this.offset += 8;\n      return hi + lo;\n\n    // fixext\n    case 0xd4:\n      type = this.view.getInt8(this.offset);\n      this.offset += 1;\n      if (type === 0x00) {\n        this.offset += 1;\n        return void 0;\n      }\n      return [type, this.bin(1)];\n    case 0xd5:\n      type = this.view.getInt8(this.offset);\n      this.offset += 1;\n      return [type, this.bin(2)];\n    case 0xd6:\n      type = this.view.getInt8(this.offset);\n      this.offset += 1;\n      return [type, this.bin(4)];\n    case 0xd7:\n      type = this.view.getInt8(this.offset);\n      this.offset += 1;\n      if (type === 0x00) {\n        hi = this.view.getInt32(this.offset) * Math.pow(2, 32);\n        lo = this.view.getUint32(this.offset + 4);\n        this.offset += 8;\n        return new Date(hi + lo);\n      }\n      return [type, this.bin(8)];\n    case 0xd8:\n      type = this.view.getInt8(this.offset);\n      this.offset += 1;\n      return [type, this.bin(16)];\n\n    // str\n    case 0xd9:\n      length = this.view.getUint8(this.offset);\n      this.offset += 1;\n      return this.str(length);\n    case 0xda:\n      length = this.view.getUint16(this.offset);\n      this.offset += 2;\n      return this.str(length);\n    case 0xdb:\n      length = this.view.getUint32(this.offset);\n      this.offset += 4;\n      return this.str(length);\n\n    // array\n    case 0xdc:\n      length = this.view.getUint16(this.offset);\n      this.offset += 2;\n      return this.array(length);\n    case 0xdd:\n      length = this.view.getUint32(this.offset);\n      this.offset += 4;\n      return this.array(length);\n\n    // map\n    case 0xde:\n      length = this.view.getUint16(this.offset);\n      this.offset += 2;\n      return this.map(length);\n    case 0xdf:\n      length = this.view.getUint32(this.offset);\n      this.offset += 4;\n      return this.map(length);\n  }\n\n  throw new Error('Could not parse');\n};\n\nfunction decode(buffer) {\n  var decoder = new Decoder(buffer);\n  var value = decoder.parse();\n  if (decoder.offset !== buffer.byteLength) {\n    throw new Error((buffer.byteLength - decoder.offset) + ' trailing bytes');\n  }\n  return value;\n}\n\nmodule.exports = decode;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./browser/decode.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}